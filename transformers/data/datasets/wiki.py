from __future__ import absolute_import, division, print_function

import os
from typing import List, Tuple

from foundation.common.file_io import PathManager

__all__ = ['list_wiki_dir', 'load_wiki_documents']


def list_wiki_dir(root: str) -> Tuple[List[str], List[List[str]]]:
    """Returns all files in the directory generated by WikiExtractor.

    The directory structure should be like this:
        root
        ├── AA
        │   ├── wiki_00
        │   ├── wiki_01
        │   └── ...
        ├── AB
        │   ├── wiki_00
        │   ├── wiki_01
        │   └── ...
        └── ...

    Returns:
        Tuple: Directory names under the root and list of filenames under each directory, like:
            [["AA", "AB", ...], [["wiki_00", "wiki_01", ...], ["wiki_00", "wiki_01", ...], ...]
    """
    # sorted for reproducible
    dirs = sorted(os.listdir(root))
    filenames_list = [sorted(os.listdir(os.path.join(root, d))) for d in dirs]
    return dirs, filenames_list


def load_wiki_documents(root: str) -> List[List[str]]:
    """Loads the documents from wiki directory.

    Args:
        root (str): See :func:`list_wiki_dir`. And each file contains several documents in the
            format:
                <doc id="" revid="" url="" title="">
                    ...
                    </doc>

    Returns:
        List[List[str]]: List of documents and each document contains list of segments.
    """
    dirs, filenames_list = list_wiki_dir(root)
    text_files = [
        os.path.join(root, d, filename)
        for d, filenames in zip(dirs, filenames_list)
        for filename in filenames
    ]  # yapf: disable

    documents = []
    for text_file in text_files:
        text_file = PathManager.get_local_path(text_file)
        with open(text_file, 'r', encoding='utf-8') as f:
            article_lines = []
            article_open = False

            for line in f.readlines():
                line = line.strip()
                if '<doc id=' in line:
                    article_open = True
                elif '</doc>' in line:
                    article_open = False
                    # ignore the first line as is is the title
                    document = [
                        line for line in article_lines[1:] if len(line) > 0 and not line.isspace()
                    ]
                    documents.append(document)
                    article_lines = []
                else:
                    if article_open:
                        article_lines.append(line)
    return documents
